#!/usr/bin/env python
# -*- coding: utf-8 -*-

import csv
import json
import re
from datetime import datetime

# defines locales this script will read/output
locales = ['en_US', 'ar_AE', 'es_AR', 'pt_BR', 'ru_RU', 'uk_UA']

def readCsvAndOutputDefine(input_fn, output_fn):
    header_line = """/// \\file:{}
/// this file is auto generated by getcsv.py at
/// {}
/// MUST NOT MODIFY BY HAND!

#ifndef __COMMON_STRING_DEFINEID_H__
#define __COMMON_STRING_DEFINEID_H__

""".format(output_fn, datetime.now())


    with open(output_fn, "w") as text_file, open(input_fn, 'rb') as csvin:
        text_file.write(header_line)
        cin = csv.DictReader(csvin, delimiter=',')
        cnt = 0
        start_rowid = 0
        last_rowid = 0
        for row in cin:
            if start_rowid == 0:
                start_rowid = int(row['id'])
                start_line = """
#define STRING_MINSTRID         {}

""".format(start_rowid)
                text_file.write(start_line)
            d = "#define {0:40s}{1}\n".format(row['defineid'], row['id'])
            text_file.write(d)
            last_rowid = int(row['id'])
            cnt += 1
        ender_line = """
#define STRING_MAXSTRID         {}
#define STRING_IDSIZE           {}

#endif  // __COMMON_STRING_DEFINEID_H__
""".format(last_rowid, cnt)
        text_file.write(ender_line)
        text_file.close()
        csvin.close()

def specialReplace(in_str):
    '''
    will replace double greek question mark
    (utf-8(0xcdbe), U+037E) into newline
    '''
    return re.sub(";;", "\x0a", in_str)

def readCsvAndOutputIni(input_fn, output_fn):
    with open(output_fn, "wb") as text_file, open(input_fn, 'rb') as csvin:
        text_file.write("; auto generated by getcsv.py\n")
        text_file.write("[General]\n")
        cin = csv.DictReader(csvin, delimiter=',')
        for idrow in cin:
            text_file.write("{0}={1}\n".format(idrow['defineid'], idrow['id']))

        for locale_name in locales:
            csvin.seek(0)
            group_name = "[{0}]\n".format(locale_name)
            text_file.write(group_name)
            for row in cin:
                newtok = specialReplace(row[locale_name])
                item = "{0}={1}\n".format(row['id'], newtok)
                text_file.write(item)

        text_file.write("\n")
    text_file.close()
    csvin.close()


def readCsvAndOutputJson(input_fn, output_fn):
    root = {}
    with open(output_fn, "wb") as text_file, open(input_fn, 'rb') as csvin:

        cin = csv.DictReader(csvin, delimiter=',')
        general = {}
        root['General'] = general;
        for idrow in cin:
            general[idrow['defineid']] = idrow['id'];

        for locale_name in locales:
            csvin.seek(0)
            tmp = {}
            root[locale_name] = tmp;
            for row in cin:
                newtok = specialReplace(row[locale_name])
                tmp[row['id']] = newtok

        text_file.write( json.dumps(root, encoding="utf-8", indent=4, sort_keys=True) )

    text_file.close()
    csvin.close()


def readCsvAndOutputQml(input_fn):
    qmlimports = """
Item {
    property var texts: {
"""

    qmlender = """
    }
}
"""

    for locale_name in locales:
        output_fn = "Text_{}.qml".format(locale_name)
        qmlheader = """/// file: {}
/// this file is auto generated by getcsv.py at
/// {} for locale: {}
/// MUST NOT MODIFY BY HAND!

import QtQuick 2.0
""".format(output_fn, datetime.now(), locale_name)

        with open(output_fn, "wb") as text_file, open(input_fn, 'rb') as csvin:
            text_file.write(qmlheader)
            text_file.write(qmlimports)
            cin = csv.DictReader(csvin, delimiter=',')

            text_file.write("        \"{0}\": \"locale: {1}\"\n".format("string_id_first_line", locale_name))
            for row in cin:
                newtok = specialReplace(row[locale_name])
                text_file.write("        , \"{0}\": \"{1}\"\n".format(row['defineid'], newtok))
            text_file.write(qmlender)

        csvin.close()

        # with
        #     text_file.write( json.dumps(root, encoding="utf-8", indent=8, sort_keys=True) )
        text_file.close()


if __name__ == '__main__':
    lang_file = 'translation.csv'
    readCsvAndOutputDefine(lang_file, 'strdef.h')
    readCsvAndOutputIni(lang_file, 'strdef.ini')
    readCsvAndOutputJson(lang_file, 'strdef.json')
    readCsvAndOutputQml(lang_file)
